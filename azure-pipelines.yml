trigger: none

pool:
  vmImage: ubuntu-latest

variables:
- group: dynatrace-vars     # Contiene DYNATRACE_API_TOKEN y DYNATRACE_URL
- name: SERVICE_NAME
  value: order-service
- name: ENV_NAME
  value: dev

steps:
# 1️⃣ Test de conexión con Dynatrace
- bash: |
    echo "Probar conexión con Dynatrace en ${DYNATRACE_URL}"
    CODE=$(curl -s -o /dev/null -w "%{http_code}" \
      -H "Authorization: Api-Token ${DYNATRACE_API_TOKEN}" \
      "${DYNATRACE_URL}/api/v2/metrics")
    echo "HTTP CODE: ${CODE}"
    if [ "${CODE}" -ne 200 ]; then
      echo "❌ Falló la conexión (esperado 200)"
      exit 1
    fi
    echo "✅ Conexión OK"
  displayName: "Test conexión Dynatrace"
  env:
    DYNATRACE_API_TOKEN: $(DYNATRACE_API_TOKEN)
    DYNATRACE_URL: $(DYNATRACE_URL)

# 2️⃣ Log inicial de Build
- bash: |
    set -e
    TS_MS=$(date +%s%3N)
    PIPE_NAME="$(Build.DefinitionName)"
    BODY=$(printf '[{"timestamp": %s, "severity": "INFO", "title": "Azure DevOps Build STARTED", "content": "Inicio de ejecución del pipeline %s", "dt.source": "azure-devops", "service.name": "%s", "env": "%s", "pipeline.id": "%s", "run.id": "%s", "status": "STARTED"}]' \
      "$TS_MS" "$PIPE_NAME" "$(SERVICE_NAME)" "$(ENV_NAME)" "$(System.DefinitionId)" "$(Build.BuildId)")

    echo "Payload STARTED:"
    echo "${BODY}"

    RESP=$(curl -s -o /tmp/resp.json -w "%{http_code}" -X POST "${DYNATRACE_URL}/api/v2/logs/ingest" \
      -H "Authorization: Api-Token ${DYNATRACE_API_TOKEN}" \
      -H "Content-Type: application/json" -d "${BODY}")
    echo "HTTP CODE: ${RESP}"
  displayName: "Enviar log STARTED"
  env:
    DYNATRACE_API_TOKEN: $(DYNATRACE_API_TOKEN)
    DYNATRACE_URL: $(DYNATRACE_URL)
    SERVICE_NAME: $(SERVICE_NAME)
    ENV_NAME: $(ENV_NAME)

# 3️⃣ Simular ejecución exitosa
- bash: |
    echo "Compilando código..."
    sleep 2
    echo "✅ Build completado con éxito"
  displayName: "Simular build exitoso"

# 4️⃣ Log final de build SUCCESS
- bash: |
    set -e
    TS_MS=$(date +%s%3N)
    PIPE_NAME="$(Build.DefinitionName)"
    BODY=$(printf '[{"timestamp": %s, "severity": "OK", "title": "Azure DevOps Build SUCCESS", "content": "Pipeline %s ejecutado correctamente", "dt.source": "azure-devops", "service.name": "%s", "env": "%s", "pipeline.id": "%s", "run.id": "%s", "status": "SUCCESS"}]' \
      "$TS_MS" "$PIPE_NAME" "$(SERVICE_NAME)" "$(ENV_NAME)" "$(System.DefinitionId)" "$(Build.BuildId)")

    echo "Payload SUCCESS:"
    echo "${BODY}"

    RESP=$(curl -s -o /tmp/resp.json -w "%{http_code}" -X POST "${DYNATRACE_URL}/api/v2/logs/ingest" \
      -H "Authorization: Api-Token ${DYNATRACE_API_TOKEN}" \
      -H "Content-Type: application/json" -d "${BODY}")
    echo "HTTP CODE: ${RESP}"
  displayName: "Enviar log SUCCESS"
  env:
    DYNATRACE_API_TOKEN: $(DYNATRACE_API_TOKEN)
    DYNATRACE_URL: $(DYNATRACE_URL)
    SERVICE_NAME: $(SERVICE_NAME)
    ENV_NAME: $(ENV_NAME)

# 5️⃣ Simular fallo (para probar color rojo)
- bash: |
    echo "Simulando fallo de compilación..."
    sleep 2
    echo "❌ Error crítico en build simulado"
    exit 1
  displayName: "Simular build fallido (ERROR)"
  continueOnError: true

# 6️⃣ Log de build FAILED (si hubo error)
- bash: |
    set -e
    TS_MS=$(date +%s%3N)
    PIPE_NAME="$(Build.DefinitionName)"
    BODY=$(printf '[{"timestamp": %s, "severity": "ERROR", "title": "Azure DevOps Build FAILED", "content": "Pipeline %s falló durante la simulación", "dt.source": "azure-devops", "service.name": "%s", "env": "%s", "pipeline.id": "%s", "run.id": "%s", "status": "FAILED"}]' \
      "$TS_MS" "$PIPE_NAME" "$(SERVICE_NAME)" "$(ENV_NAME)" "$(System.DefinitionId)" "$(Build.BuildId)")

    echo "Payload FAILED:"
    echo "${BODY}"

    RESP=$(curl -s -o /tmp/resp.json -w "%{http_code}" -X POST "${DYNATRACE_URL}/api/v2/logs/ingest" \
      -H "Authorization: Api-Token ${DYNATRACE_API_TOKEN}" \
      -H "Content-Type: application/json" -d "${BODY}")
    echo "HTTP CODE: ${RESP}"
  displayName: "Enviar log FAILED"
  condition: succeededOrFailed()
  env:
    DYNATRACE_API_TOKEN: $(DYNATRACE_API_TOKEN)
    DYNATRACE_URL: $(DYNATRACE_URL)
    SERVICE_NAME: $(SERVICE_NAME)
    ENV_NAME: $(ENV_NAME)

# 7️⃣ Log de RELEASE (simulado)
- bash: |
    set -e
    TS_MS=$(date +%s%3N)
    PIPE_NAME="$(Build.DefinitionName)"
    BODY=$(printf '[{"timestamp": %s, "severity": "INFO", "title": "Azure DevOps Release ejecutada", "content": "Se completó la publicación simulada del pipeline %s", "dt.source": "azure-devops", "service.name": "%s", "env": "%s", "pipeline.id": "%s", "run.id": "%s", "status": "RELEASED"}]' \
      "$TS_MS" "$PIPE_NAME" "$(SERVICE_NAME)" "$(ENV_NAME)" "$(System.DefinitionId)" "$(Build.BuildId)")

    echo "Payload RELEASE:"
    echo "${BODY}"

    RESP=$(curl -s -o /tmp/resp.json -w "%{http_code}" -X POST "${DYNATRACE_URL}/api/v2/logs/ingest" \
      -H "Authorization: Api-Token ${DYNATRACE_API_TOKEN}" \
      -H "Content-Type: application/json" -d "${BODY}")
    echo "HTTP CODE: ${RESP}"
  displayName: "Enviar log RELEASE"
  condition: succeededOrFailed()
  env:
    DYNATRACE_API_TOKEN: $(DYNATRACE_API_TOKEN)
    DYNATRACE_URL: $(DYNATRACE_URL)
    SERVICE_NAME: $(SERVICE_NAME)
    ENV_NAME: $(ENV_NAME)
