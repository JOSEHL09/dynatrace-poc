trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: dynatrace-vars   # Contiene DYNATRACE_API_TOKEN y DYNATRACE_URL
- name: SERVICE_NAME
  value: "order-service"
- name: ENV_NAME
  value: "dev"

steps:
# 1Ô∏è‚É£ TEST DE CONEXI√ìN
- bash: |
    echo "üîç Probando conexi√≥n con Dynatrace en $DYNATRACE_URL"
    CODE=$(curl -s -o /dev/null -w "%{http_code}" \
      -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" \
      "$DYNATRACE_URL/api/v2/metrics")
    echo "HTTP CODE: $CODE"
    if [ "$CODE" -ne 200 ]; then
      echo "‚ùå Fall√≥ la conexi√≥n (esperado 200)"
      exit 1
    fi
    echo "‚úÖ Conexi√≥n OK con Dynatrace"
  displayName: 'Test conexi√≥n Dynatrace'
  env:
    DYNATRACE_API_TOKEN: $(DYNATRACE_API_TOKEN)
    DYNATRACE_URL: $(DYNATRACE_URL)

# 2Ô∏è‚É£ LOG INICIAL DE BUILD
- bash: |
    NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    echo "üöÄ Enviando LOG inicial de Build a Dynatrace..."
    BODY=$(cat <<JSON
[
  {
    "timestamp": "$NOW",
    "content": "Inicio de ejecuci√≥n del pipeline $(Build.DefinitionName)",
    "title": "Azure DevOps Build STARTED",
    "log.source": "AzureDevOps",
    "service.name": "$(SERVICE_NAME)",
    "env": "$(ENV_NAME)",
    "pipeline.id": "$(System.DefinitionId)",
    "run.id": "$(Build.BuildId)",
    "status": "STARTED"
  }
]
JSON
)
    curl -s -X POST "$DYNATRACE_URL/api/v2/logs/ingest" \
      -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" \
      -H "Content-Type: application/json; charset=utf-8" \
      -d "$BODY"
    echo "‚úÖ Log inicial enviado"
  displayName: "Enviar LOG inicial de Build"
  env:
    DYNATRACE_API_TOKEN: $(DYNATRACE_API_TOKEN)
    DYNATRACE_URL: $(DYNATRACE_URL)
    SERVICE_NAME: $(SERVICE_NAME)
    ENV_NAME: $(ENV_NAME)

# 3Ô∏è‚É£ LOG FINAL DE BUILD (√âXITO O FALLO)
- bash: |
    echo "üì¶ Enviando log final de build..."
    STATUS=$(if [ "$(Agent.JobStatus)" == "Succeeded" ]; then echo "SUCCESS"; else echo "FAILED"; fi)
    NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

    BODY=$(cat <<JSON
[
  {
    "timestamp": "$NOW",
    "title": "Azure DevOps Build $STATUS",
    "content": "Pipeline $(Build.DefinitionName) ejecutado con estado $STATUS",
    "log.source": "AzureDevOps",
    "service.name": "$(SERVICE_NAME)",
    "env": "$(ENV_NAME)",
    "pipeline.id": "$(System.DefinitionId)",
    "run.id": "$(Build.BuildId)",
    "status": "$STATUS"
  }
]
JSON
)
    curl -s -X POST "$DYNATRACE_URL/api/v2/logs/ingest" \
      -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" \
      -H "Content-Type: application/json; charset=utf-8" \
      -d "$BODY"
    echo "‚úÖ Log final de Build enviado con estado: $STATUS"
  displayName: "Enviar LOG final de Build a Dynatrace"
  condition: always()
  env:
    DYNATRACE_API_TOKEN: $(DYNATRACE_API_TOKEN)
    DYNATRACE_URL: $(DYNATRACE_URL)
    SERVICE_NAME: $(SERVICE_NAME)
    ENV_NAME: $(ENV_NAME)

# 4Ô∏è‚É£ LOG DE RELEASE (si aplica)
- bash: |
    echo "üö¢ Enviando log de RELEASE..."
    NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

    BODY=$(cat <<JSON
[
  {
    "timestamp": "$NOW",
    "title": "Azure DevOps Release ejecutada",
    "content": "Se complet√≥ la publicaci√≥n del pipeline $(Build.DefinitionName)",
    "log.source": "AzureDevOps",
    "service.name": "$(SERVICE_NAME)",
    "env": "$(ENV_NAME)",
    "pipeline.id": "$(System.DefinitionId)",
    "run.id": "$(Build.BuildId)",
    "status": "RELEASED"
  }
]
JSON
)
    curl -s -X POST "$DYNATRACE_URL/api/v2/logs/ingest" \
      -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" \
      -H "Content-Type: application/json; charset=utf-8" \
      -d "$BODY"
    echo "‚úÖ Log de RELEASE enviado"
  displayName: "Enviar LOG de Release a Dynatrace"
  condition: succeeded()
  env:
    DYNATRACE_API_TOKEN: $(DYNATRACE_API_TOKEN)
    DYNATRACE_URL: $(DYNATRACE_URL)
    SERVICE_NAME: $(SERVICE_NAME)
    ENV_NAME: $(ENV_NAME)
